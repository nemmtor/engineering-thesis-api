// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
  // binaryTargets = ["native", "linux-arm-openssl-1.1.x", "linux-musl"]
}

enum UserRole {
  ADMIN
  MANAGER
  QUALITY_CONTROLLER
  SALES_REPRESENTATIVE
  USER
}

model User {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  archivedAt DateTime? @map("archived_at")

  name      String
  email     String  @unique
  password  String
  avatarUrl String? @map("avatar_url")
  isActive  Boolean @default(false) @map("is_active")

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int  @default(1) @map("role_id")

  sale     Sale[]
  saleToQa Sale[] @relation("saleToQa")
  saleToRep Sale[] @relation("saleToRep")

  @@map("user")
}

model Role {
  id   Int      @id @default(autoincrement())
  name UserRole
  User User[]


  @@map("role")
}

model Customer {
  id        String @id @default(cuid())
  taxNumber String @unique @map("tax_nunber")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name           String
  companyName    String @map("company_name")
  activityType   String @map("activity_type")
  companyAddress String @map("company_address")

  email String? @unique
  phone String?

  lawyer   Lawyer? @relation(fields: [lawyerId], references: [id])
  lawyerId String? @map("lawyer_id")


  Sale Sale[]

  @@map("customer")
}

model Lawyer {
  id       String     @id @default(cuid())
  name     String
  customer Customer[]

  @@map("lawyer")
}

model Contract {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  plannedSignAt DateTime @map("planned_signed_at")
  price         Int
  length        Int
  signAddress   String   @map("sign_address")

  signedAt DateTime? @map("signed_at")

  sale Sale?

  @@map("contract")
}

enum ItemType {
  RED_STAMP
  GREEN_STAMP
  CERTIFICATE
}

model SaleItem {
  id          Int      @id @default(autoincrement())
  type        ItemType
  isAvailable Boolean  @default(true) @map("is_available")

  sale Sale[]

  @@map("saleitem")
}

enum StatusType {
  BEFORE_QA
  QA_REJECTED
  DEBT_REJECTED
  QA_ACCEPTED
  SALE_CONFIRMED
  SIGN_REJECTED
  SIGN_ACCEPTED
  ASSIGNED
}

model SaleStatus {
  id        String     @id @default(cuid())
  updatedAt DateTime   @updatedAt @map("updated_at")
  type      StatusType

  message String?

  sale Sale?

  @@map("salestatus")
}

model Sale {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  qa   User?   @relation(fields: [qaId], references: [id], name: "saleToQa")
  qaId String? @map("qa_id")

  rep   User?   @relation(fields: [repId], references: [id], name: "saleToRep")
  repId String? @map("rep_id")

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @map("customer_id")

  contract   Contract @relation(fields: [contractId], references: [id])
  contractId String   @unique @map("contract_id")

  item   SaleItem? @relation(fields: [itemId], references: [id])
  itemId Int?      @map("item_id")

  status   SaleStatus @relation(fields: [statusId], references: [id])
  statusId String     @unique @map("status_id")

  others String?

  @@map("sale")
}
